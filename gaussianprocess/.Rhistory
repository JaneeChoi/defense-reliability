L=apply(MCmat,2,min)
H_mean=apply(MCmat,2,mean)
H_mat_p<-MCmat
plot(t,sapply(t,H),type="l",col="red",lty=3,ylab="",main="H(t) vs H_hat(t)")
points(t,sapply(t,H_pines),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
u1_p=H_pines(t[200])
ui_p=H_mat_p[,200]
u1_p
ui_p=sort(H_mat_p[,200])
ui_p
u1_p
u1_p > ui_p[length(ui_p)-4]
length(ui_p)
plot(t_G,G_mean,type="l",col="red",lty=3,ylab="",main="G_bar(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_pines),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
s=100
t_G<-seq(0,0.25,length.out = 100)
MCmat<-matrix(0,nrow=s-1,ncol=100)
for (i in 2:s){
xr<-runif(japanesepines$n)
yr<-runif(japanesepines$n)
for (j in 1:100){
MCmat[i-1,j]=G_hat(japanesepines$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
G_mean=apply(MCmat,2,mean)
G_p<-function(t){G(japanesepines$n,t)}
G_mat_p<-MCmat
plot(t_G,sapply(t_G,G_p),type="l",col="red",lty=3,ylab="",main="G(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_pines),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
length(U)
length(t_G)
plot(t_G,G_mean,type="l",col="red",lty=3,ylab="",main="G_bar(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_pines),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G_bar(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
t_G[50]
t_G[40]
length(G_mean)
length(G_p[t_G])
u1_p_2=sum((G_mean-sapply(t_G,G_pines))^2)*0.25/100
u1_p_2
ui_p_2=sapply(2:s,function(i) sum((G_mat_p[i-1,]-sapply(t_G,G_pines))^2)*0.25/100)
G_bar = sapply(t_G,G_pines)
G_bar
G_mat_p[1,]
G_bar = sapply(t_G,G_pines)
u1_p_2=sum((G_mean-G_bar)^2)*0.25/100
ui_p_2=sapply(2:s,function(i) sum((G_mat_p[i-1,]-G_bar)^2)*0.25/100)
ui_p_2=sort(sapply(2:s,function(i) sum((G_mat_p[i-1,]-G_bar)^2)*0.25/100))
u1_p_1 > ui_p_1[length(ui_p_1)-4]
u1_p_2 > ui_p_2[length(ui_p_2)-4]
u1_p_2
ui_p_2
u1_p_2
ui_p_2
u1_p_2 < ui_p_2[5]
H_redwood
u1_r_1=H_redwood(t[200])
u1_r_1=H_redwood(t[200])
ui_r_1=sort(H_mat_r[,200])
u1_c_1=H_cells(t[200])
H<-function(t){
if (t<=1){
return(pi*t^2-8/3*t^3+t^4/2)
}
else if (t<=2^0.5){
return(1/3-2*t^2-t^4/2+4/3*(t^2-1)^0.5*(2*t^2+1)+2*t^2*asin(2*t^(-2)-1))
}
}
H_hat<-function(n,x,y,t){
cnt=0
for (i in 1:(n-1)){
for (j in (i+1):n){
if ((x[i]-x[j])^2+(y[i]-y[j])^2 < t^2){cnt=cnt+1}
}
}
return(cnt/(n*(n-1)/2))
}
G<-function(n,t){
return(1-exp(-n*pi*t^2))
}
G_hat<-function(n,x,y,t){
cnt=0
for (i in 1:n){
minv=3
for (j in ((1:n)[-i])){
minv=min(minv,sqrt((x[i]-x[j])^2+(y[i]-y[j])^2))
}
if (minv<=t){cnt=cnt+1}
}
return(cnt/n)
}
H_pines<-function(t){H_hat(japanesepines$n,japanesepines$x,japanesepines$y,t)}
H_redwood<-function(t){H_hat(redwood$n,redwood$x,redwood$y,t)}
H_cells<-function(t){H_hat(cells$n,cells$x,cells$y,t)}
G_pines<-function(t){G_hat(japanesepines$n,japanesepines$x,japanesepines$y,t)}
G_redwood<-function(t){G_hat(redwood$n,redwood$x,redwood$y,t)}
G_cells<-function(t){G_hat(cells$n,cells$x,cells$y,t)}
t<-seq(0,sqrt(2),length.out = 500)
U=rep(0,500)
L=rep(1,500)
s=100
MCmat<-matrix(0,nrow=s-1,ncol=500)
for (i in 2:s){
xr<-runif(japanesepines$n)
yr<-runif(japanesepines$n)
for (j in 1:500){
MCmat[i-1,j]=H_hat(japanesepines$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
H_mean=apply(MCmat,2,mean)
H_mat_p<-MCmat
plot(t,sapply(t,H),type="l",col="red",lty=3,ylab="",main="H(t) vs H_hat(t)")
points(t,sapply(t,H_pines),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t,H_mean,type="l",col="red",lty=3,ylab="",main="H_bar(t) vs H_hat(t)")
points(t,sapply(t,H_pines),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H_bar(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
s=100
t_G<-seq(0,0.25,length.out = 100)
MCmat<-matrix(0,nrow=s-1,ncol=100)
for (i in 2:s){
xr<-runif(japanesepines$n)
yr<-runif(japanesepines$n)
for (j in 1:100){
MCmat[i-1,j]=G_hat(japanesepines$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
G_mean=apply(MCmat,2,mean)
G_p<-function(t){G(japanesepines$n,t)}
G_mat_p<-MCmat
plot(t_G,sapply(t_G,G_p),type="l",col="red",lty=3,ylab="",main="G(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_pines),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t_G,G_mean,type="l",col="red",lty=3,ylab="",main="G_bar(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_pines),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G_bar(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
u1_p_1=H_pines(t[200])
ui_p_1=sort(H_mat_p[,200])
u1_p_1 > ui_p_1[length(ui_p_1)-4]
G_bar = sapply(t_G,G_pines)
u1_p_2=sum((G_mean-G_bar)^2)*0.25/100
ui_p_2=sort(sapply(2:s,function(i) sum((G_mat_p[i-1,]-G_bar)^2)*0.25/100))
u1_p_2 > ui_p_2[length(ui_p_2)-4]
u1_p_2 < ui_p_2[5]
t<-seq(0,sqrt(2),length.out = 500)
U=rep(0,500)
L=rep(1,500)
s=100
MCmat<-matrix(0,nrow=s-1,ncol=500)
for (i in 2:s){
xr<-runif(redwood$n)
yr<-runif(redwood$n,-1,0)
for (j in 1:500){
MCmat[i-1,j]=H_hat(redwood$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
H_mean=apply(MCmat,2,mean)
H_mat_r<-MCmat
plot(t,sapply(t,H),type="l",col="red",lty=3,ylab="",main="H(t) vs H_hat(t)")
points(t,sapply(t,H_redwood),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t,H_mean,type="l",col="red",lty=3,ylab="",main="H_bar(t) vs H_hat(t)")
points(t,sapply(t,H_redwood),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H_bar(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
s=100
t_G<-seq(0,0.25,length.out = 100)
MCmat<-matrix(0,nrow=s-1,ncol=100)
for (i in 2:s){
xr<-runif(redwood$n)
yr<-runif(redwood$n,-1,0)
for (j in 1:100){
MCmat[i-1,j]=G_hat(redwood$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
G_mean=apply(MCmat,2,mean)
G_r<-function(t){G(redwood$n,t)}
G_mat_r<-MCmat
plot(t_G,sapply(t_G,G_r),type="l",col="red",lty=3,ylab="",main="G(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_redwood),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t_G,G_mean,type="l",col="red",lty=3,ylab="",main="G_bar(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_redwood),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G_bar(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
u1_r_1=H_redwood(t[200])
ui_r_1=sort(H_mat_r[,200])
u1_r_1 > ui_r_1[length(ui_r_1)-4]
u1_r_1
ui_r_1
G_bar = sapply(t_G,G_redwood)
u1_r_2=sum((G_mean-G_bar)^2)*0.25/100
ui_r_2=sort(sapply(2:s,function(i) sum((G_mat_r[i-1,]-G_bar)^2)*0.25/100))
u1_r_2 > ui_r_2[length(ui_r_2)-4]
u1_r_2 < ui_r_2[5]
ui
ui_r_2
u1_r_2
ui_r_2
t<-seq(0,sqrt(2),length.out = 500)
U=rep(0,500)
L=rep(1,500)
s=100
MCmat<-matrix(0,nrow=s-1,ncol=500)
for (i in 2:s){
xr<-runif(cells$n)
yr<-runif(cells$n)
for (j in 1:500){
MCmat[i-1,j]=H_hat(cells$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
H_mean=apply(MCmat,2,mean)
H_mat_c<-MCmat
plot(t,sapply(t,H),type="l",col="red",lty=3,ylab="",main="H(t) vs H_hat(t)")
points(t,sapply(t,H_cells),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t,H_mean,type="l",col="red",lty=3,ylab="",main="H_bar(t) vs H_hat(t)")
points(t,sapply(t,H_cells),type="s")
polygon(c(t, rev(t)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("H_bar(t)","H_hat(t)"),lty=c(3,1),col=c("red","black"))
s=100
t_G<-seq(0,0.25,length.out = 100)
MCmat<-matrix(0,nrow=s-1,ncol=100)
for (i in 2:s){
xr<-runif(cells$n)
yr<-runif(cells$n)
for (j in 1:100){
MCmat[i-1,j]=G_hat(cells$n,xr,yr,t[j])
}
}
U=apply(MCmat,2,max)
L=apply(MCmat,2,min)
G_mean=apply(MCmat,2,mean)
G_c<-function(t){G(cells$n,t)}
G_mat_c<-MCmat
plot(t_G,sapply(t_G,G_c),type="l",col="red",lty=3,ylab="",main="G(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_cells),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
plot(t_G,G_mean,type="l",col="red",lty=3,ylab="",main="G_bar(t) vs G_hat(t)")
points(t_G,sapply(t_G,G_cells),type="s")
polygon(c(t_G, rev(t_G)), c(U, rev(L)), border=NA,col = adjustcolor("grey",alpha=0.5))
legend("topright",legend=c("G_bar(t)","G_hat(t)"),lty=c(3,1),col=c("red","black"))
u1_c_1=H_cells(t[200])
ui_c_1=sort(H_mat_c[,200])
u1_c_1 > ui_c_1[length(ui_c_1)-4]
u1_c_1
ui_c_1
G_bar = sapply(t_G,G_cells)
u1_c_2=sum((G_mean-G_bar)^2)*0.25/100
ui_c_2=sort(sapply(2:s,function(i) sum((G_mat_c[i-1,]-G_bar)^2)*0.25/100))
u1_c_2 > ui_c_2[length(ui_c_2)-4]
u1_c_2 < ui_c_2[5]
rpoispp(150)
rpoispp(150)$x
areaTotal=1;
lambda=150;
#Simulate Poisson point process
numbPoints=rpois(1,areaTotal*lambda)
xx=runif(numbPoints);
yy=runif(numbPoints);
#Plotting
par(pty="s")
plot(xx,yy,'p',xlab='x',ylab='y',col='blue');
rho_hat <- numpoints/areaTotal
rho_hat <- numbPoints/areaTotal
rho_hat
rho_hat<-matrix(0,nrow=300,ncol=300)
for (x_ind in 300){
for (y_ind in 300){
sum=0
for (i in numbPoints){
sum=sum+K(xix[x_ind]-xx[i],yiy[y_ind]-yy[i])/(4*b^2)
}
rho_hat[x_ind,y_ind]=sum
}
}
areaTotal=1;
lambda=150;
#Simulate Poisson point process
numbPoints=rpois(1,areaTotal*lambda)
xx=runif(numbPoints);
yy=runif(numbPoints);
#Plotting
par(pty="s")
plot(xx,yy,'p',xlab='x',ylab='y',col='blue');
b=0.05
K<-function(x,y){
if (abs(x)/b<=1 & abs(y)/b<=1){
return(1/(b^2*4))
}
}
xix<-seq(0,1,length.out = 300)
xiy<-seq(0,1,length.out = 300)
rho_hat<-matrix(0,nrow=300,ncol=300)
for (x_ind in 300){
for (y_ind in 300){
sum=0
for (i in numbPoints){
sum=sum+K(xix[x_ind]-xx[i],yiy[y_ind]-yy[i])/(4*b^2)
}
rho_hat[x_ind,y_ind]=sum
}
}
rho_hat<-matrix(0,nrow=300,ncol=300)
for (x_ind in 300){
for (y_ind in 300){
sum=0
for (i in numbPoints){
sum=sum+K(xix[x_ind]-xx[i],xiy[y_ind]-yy[i])/(4*b^2)
}
rho_hat[x_ind,y_ind]=sum
}
}
print(sum)
K(xix[1]-xx[1],xiy[1]-yy[1])
K(xix[1]-xx[1],xiy[1]-yy[1])
b=0.05
K<-function(x,y){
if (abs(x)/b<=1 & abs(y)/b<=1){
return(1/(b^2*4))
}
else return(0)
}
xix<-seq(0,1,length.out = 300)
xiy<-seq(0,1,length.out = 300)
rho_hat<-matrix(0,nrow=300,ncol=300)
for (x_ind in 300){
for (y_ind in 300){
sum=0
for (i in numbPoints){
sum=sum+K(xix[x_ind]-xx[i],xiy[y_ind]-yy[i])/(4*b^2)
}
rho_hat[x_ind,y_ind]=sum
}
}
rho_hat
data {
library(rstan); library(cmdstanr); library(parallel); library("tidyverse"); library(dplyr)
setwd("C:/Users/serim/Documents/academic/Bayes_Study/reliability_prediction/gaussianprocess")
set.seed(1954)
.libPaths("~/Rlib")
options(mc.cores = parallel::detectCores())
util <- new.env()
source('stan_utility.R', local=util)
source('gp_utility.R', local=util)
c_light <- c("#DCBCBC")
c_light_highlight <- c("#C79999")
c_mid <- c("#B97C7C")
c_mid_highlight <- c("#A25050")
c_dark <- c("#8F2727")
c_dark_highlight <- c("#7C0000")
c_light_trans <- c("#DCBCBC80")
c_light_highlight_trans <- c("#C7999980")
c_mid_trans <- c("#B97C7C80")
c_mid_highlight_trans <- c("#A2505080")
c_dark_trans <- c("#8F272780")
c_dark_highlight_trans <- c("#7C000080")
c_light_teal="#6B8E8E"
c_mid_teal="#487575"
c_dark_teal="#1D4F4F"
c_green_trans <- c("#00FF0080")
c_superfine <- c("#8F272705")
println <- function(msg) cat(msg); cat("\n")
printf <- function(pattern, ...) println(sprintf(pattern, ...))
print_file <- function(file) println(readLines(file))
scriptDir <- getwd()
modelDir <- file.path(scriptDir, "models")
dataDir <- file.path(scriptDir, "data")
gp_fit <- function(modelName, data){
chains <- 4
parallel_chains <- min(chains, detectCores())
scriptDir <- getwd()
delivDir <- file.path(scriptDir, "deliv", modelName)
prefit <- file.path(delivDir, paste0(modelName, ".rda"))
stanfile <- file.path(modelDir, modelName, paste0(modelName, ".stan"))
if (file.exists(prefit)){
fit <- readRDS(prefit)
}else{
mod <- cmdstan_model(stanfile, quiet = FALSE)
fit <- mod$sample(data, chains = chains, iter_warmup = 500, iter_sampling = 500,
parallel_chains = parallel_chains, save_warmup = FALSE)
dir.create(delivDir)
fit$save_object(file = prefit)
}
fit
}
div_detect <- function(stanfit){
partition <- util$partition_div(stanfit)
div_samples <- partition[[1]]
nondiv_samples <- partition[[2]]
par(mfrow=c(1, 3))
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_GP_engine, log="xy",
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_GP_engine")
points(div_samples$length_GP_engine, div_samples$sigma_GP_engine,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_GP_engine, nondiv_samples$sigma_error_ship,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_GP_engine", ylab="sigma_error_ship")
points(div_samples$length_GP_engine, div_samples$sigma_error_ship,
col=c_green_trans, pch=16, cex=0.8)
plot(nondiv_samples$length_engine_scale, nondiv_samples$length_GP_engine_s,
col=c_dark_trans, pch=16, cex=0.8, xlab="length_engine_scale", ylab="length_GP_engine_s")
points(div_samples$length_engine_scale, div_samples$length_GP_engine_s,
col=c_green_trans, pch=16, cex=0.8)
}
```
data preparation
```{r}
N_engines <- 5
N_ships <- 99
N_ages <- 31
N_ages_obs <- 31
ship_engine_ind <- read.csv("data/engine.csv")$engine
ship_ind <- read.csv("data/ship_index.csv")$X0
age_ind <- read.csv("data/x_age.csv", header = FALSE)[-1,1]
y <- read.csv("data/y_count_pwr.csv", header = FALSE)[,1]
data <- list(N = length(y), N_engines=N_engines,N_ships = N_ships, N_ages= N_ages, N_ages_obs = N_ages_obs,
ship_engine_ind =ship_engine_ind, ship_ind = ship_ind, age_ind = age_ind, y=y)
N_engines <- 5
N_ships <- 99
N_ages <- 31
N_ages_obs <- 31
ship_engine_ind <- read.csv("data/engine.csv")$engine
ship_ind <- read.csv("data/ship_index.csv")$X0
age_ind <- read.csv("data/x_age.csv", header = FALSE)[-1,1]
y <- read.csv("data/y_count_pwr.csv", header = FALSE)[,1]
data <- list(N = length(y), N_engines=N_engines,N_ships = N_ships, N_ages= N_ages, N_ages_obs = N_ages_obs,
ship_engine_ind =ship_engine_ind, ship_ind = ship_ind, age_ind = age_ind, y=y)
mseNplot <- function(x, y){
yhat<- x %>%
dplyr::filter(str_detect(variable, "y_new_pred")) %>%
pull(mean)
yhat<- (matrix(yhat, nrow = 31, ncol = 99))
y_hat <- rep(NA, length(y))
for (i in 1:length(y)){
y_hat[i] <- yhat[age_ind[i],ship_ind[i]]
}
par(mfrow=c(1,1))
plot(1, type="n",xlim=c(0,31),ylim=c(-3,4),xlab="age",ylab="scaled failure count")
for (n in 1:653){
points(age_ind[n],y[n],col="black",pch=16)
points(age_ind[n],y_hat[n],col="red")
}
mean((y-y_hat)^2)
}
data$emp_le_shape <- 18.707524
data$emp_le_scale <- 4.120272
data$emp_ls_shape <- 11.289554
data$emp_ls_scale <- 6.821292
modelName <- "gp_hp_n_5var"
sf_gp_hp_n_5var <- gp_fit(modelName, data)
data$hp_scale <- 1
data$emp_le_shape <- 18.707524
data$emp_le_scale <- 4.120272
data$emp_ls_shape <- 11.289554
data$emp_ls_scale <- 6.821292
modelName <- "gp_hp_n_5var"
sf_gp_hp_n_5var <- gp_fit(modelName, data)
sf_gp_hp_n_5var_sm<-sf_gp_hp_n_5var$summary()
yhat<- sf_gp_hp_n_5var_sm %>%
dplyr::filter(str_detect(variable, "y_new_pred")) %>%
pull(mean)
yhat<- (matrix(yhat, nrow = 31, ncol = 99))
yhat
write.csv(yhat,file="C:/Users/serim/Documents/academic/Bayes_Study/reliability_prediction/gaussianprocess/y_pred_5var.csv")
_hat <- rep(NA, length(y))
for (i in 1:length(y)){
y_hat[i] <- yhat[age_ind[i],ship_ind[i]]
}
par(mfrow=c(1,1))
plot(1, type="n",xlim=c(0,31),ylim=c(-3,4),xlab="age",ylab="scaled failure count")
for (n in 1:653){
points(age_ind[n],y[n],col="black",pch=16)
points(age_ind[n],y_hat[n],col="red")
}
y_hat <- rep(NA, length(y))
for (i in 1:length(y)){
y_hat[i] <- yhat[age_ind[i],ship_ind[i]]
}
par(mfrow=c(1,1))
plot(1, type="n",xlim=c(0,31),ylim=c(-3,4),xlab="age",ylab="scaled failure count")
for (n in 1:653){
points(age_ind[n],y[n],col="black",pch=16)
points(age_ind[n],y_hat[n],col="red")
}
mean((y-y_hat)^2)
